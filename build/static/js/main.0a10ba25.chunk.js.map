{"version":3,"sources":["components/FireMarker.js","components/StormMarker.js","components/VolcanoMarker.js","components/ColdMarker.js","components/InfoBox.js","components/Map.js","components/Loading.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["FireMarker","lat","lng","onClick","className","StormMarker","VolcanoMarker","ColdMarker","InfoBox","info","title","category","source","href","url","target","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","fires","map","ev","categories","id","geometries","coordinates","sources","storms","length","volcanoes","type","cold","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loading","color","height","width","radius","margin","Header","App","setEventData","loading","isLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a10ba25.chunk.js","sourcesContent":["import React from 'react'\r\nimport { WiFire } from 'react-icons/wi'\r\n\r\nconst FireMarker = ({ lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"fire-marker\" onClick={onClick}>\r\n            <WiFire className=\"fire icon\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FireMarker\r\n","import React from 'react'\r\nimport { WiLightning } from 'react-icons/wi'\r\n\r\nconst StormMarker = ({ lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"storm-marker\" onClick={onClick}>\r\n            <WiLightning className=\"storm icon\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StormMarker\r\n","import React from 'react'\r\nimport { WiVolcano } from 'react-icons/wi'\r\n\r\nconst VolcanoMarker = ({ lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"volcano-marker\" onClick={onClick}>\r\n            <WiVolcano className=\"volcano icon\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VolcanoMarker","import React from 'react'\r\nimport { WiSnowflakeCold } from 'react-icons/wi'\r\n\r\nconst ColdMarker = ({ lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"cold-marker\" onClick={onClick}>\r\n            <WiSnowflakeCold className=\"cold icon\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColdMarker","import React from 'react'\r\n\r\nconst InfoBox = ({ info }) => {\r\n    return (\r\n        <div className='info-box'>\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>Title: <strong>{info.title}</strong></li>\r\n                <li>Category: {info.category}</li>\r\n                <li>Source: {info.source}</li>\r\n                <li><a href={info.url} target='blank'>Learn more &rarr;</a></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import GoogleMapReact from 'google-map-react'\r\nimport { useState } from 'react'\r\nimport FireMarker from './FireMarker'\r\nimport StormMarker from './StormMarker'\r\nimport VolcanoMarker from './VolcanoMarker'\r\nimport ColdMarker from './ColdMarker'\r\nimport InfoBox from './InfoBox'\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const fires = eventData.map((ev) => {\r\n        if (ev.categories[0].id === 8) {\r\n            return (\r\n                <FireMarker\r\n                    lat={ev.geometries[0].coordinates[1]}\r\n                    lng={ev.geometries[0].coordinates[0]}\r\n                    onClick={() =>\r\n                        setLocationInfo({\r\n                            title: ev.title,\r\n                            category: ev.categories[0].title,\r\n                            source: ev.sources[0].id,\r\n                            url: ev.sources[0].url\r\n                        })\r\n                    }\r\n                />\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n    const storms = eventData.map((ev) => {\r\n        if (ev.categories[0].id === 10) {\r\n            return (\r\n                <StormMarker\r\n                    lat={ev.geometries[ev.geometries.length - 1].coordinates[1]}\r\n                    lng={ev.geometries[ev.geometries.length - 1].coordinates[0]}\r\n                    onClick={() =>\r\n                        setLocationInfo({\r\n                            title: ev.title,\r\n                            source: ev.sources[0].id,\r\n                            url: ev.sources[0].url\r\n                        })\r\n                    }\r\n                />\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n    const volcanoes = eventData.map((ev) => {\r\n        if (ev.categories[0].id === 12 && ev.geometries[0].type !== \"Polygon\") {\r\n            return (\r\n                <VolcanoMarker\r\n                    lat={ev.geometries[0].coordinates[1]}\r\n                    lng={ev.geometries[0].coordinates[0]}\r\n                    onClick={() =>\r\n                        setLocationInfo({\r\n                            title: ev.title,\r\n                            source: ev.sources[0].id,\r\n                            url: ev.sources[0].url\r\n                        })\r\n                    }\r\n                />\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n    const cold = eventData.map((ev) => {\r\n        if (ev.categories[0].id === 15 && ev.geometries[0].type !== \"Polygon\") {\r\n            return (\r\n                <ColdMarker\r\n                    lat={ev.geometries[0].coordinates[1]}\r\n                    lng={ev.geometries[0].coordinates[0]}\r\n                    onClick={() =>\r\n                        setLocationInfo({\r\n                            title: ev.title,\r\n                            source: ev.sources[0].id,\r\n                            url: ev.sources[0].url\r\n                        })\r\n                    }\r\n                />\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className='map'>\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: API_KEY }}\r\n                defaultCenter={center}\r\n                defaultZoom={zoom}\r\n            >\r\n                {fires}\r\n                {storms}\r\n                {volcanoes}\r\n                {cold}\r\n            </GoogleMapReact>\r\n            {locationInfo && <InfoBox info={locationInfo} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nMap.defaultProps = {\r\n    center: {\r\n        lat: 39.8283,\r\n        lng: -98.5795\r\n    },\r\n    zoom: 4\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport { ScaleLoader } from 'react-spinners'\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className='loader'>\r\n            <ScaleLoader\r\n                color={'#0099ff'}\r\n                height={40}\r\n                width={8}\r\n                radius={5}\r\n                margin={6}\r\n            />\r\n            <h1 className='loader-title'>Fetching Data...</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className='header'>\r\n            <h1>Natural Event Tracker (Powered by NASA)</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\nimport Map from './components/Map'\nimport Loading from './components/Loading'\nimport Header from './components/Header'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, isLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      isLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      isLoading(false)\n    }\n\n    fetchEvents()\n  }, [])\n\n  if (loading) {\n    return (\n      <div>\n        <Loading />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Header />\n        <Map eventData={eventData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}